// Code generated by go-bindata.
// sources:
// tmpl/changelog.html
// tmpl/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplChangelogHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x4b\x6f\xe4\x36\x0c\x3e\x27\xbf\x82\xf5\xdd\xd2\xe4\xd1\xa6\x48\x1d\x03\x41\x7a\xc8\xa1\x48\x81\x76\xb1\x77\xd9\xa2\xc7\x9a\x68\x24\x47\x92\xe7\x81\x20\xff\x7d\x69\xf9\x91\x19\x63\xb2\xd9\xc3\xee\xc9\xa2\x48\x7e\x1f\xc9\x4f\xc3\xc9\xea\xb0\xd6\xf9\xf9\x59\x56\xa3\x90\xf4\x3d\xcb\xb4\x32\xcf\xe0\x50\xdf\x25\x3e\xec\x35\xfa\x1a\x31\x24\x50\x3b\xac\xee\x92\x3a\x84\xc6\xdf\x72\xbe\x16\xbb\x52\x1a\x56\x58\x1b\x7c\x70\xa2\xe9\x8c\xd2\xae\xf9\x74\xc1\xaf\xd8\x15\xbb\xe4\xa5\xf7\xef\x77\x6c\xad\x28\xca\xfb\xe4\xd7\xd2\xa4\xa1\xc6\x35\xfe\x3c\xb2\xca\x9a\x90\x8a\x2d\x7a\xbb\x46\x7e\xcd\x7e\x67\x8b\xc8\x77\x78\x7d\x40\xd6\xb1\x45\x8e\xfc\xbc\xb0\x72\x0f\xaf\xd0\x08\x29\x95\x59\xa6\xc1\x36\xb7\x70\xb3\x68\x76\x7f\xc1\x5b\x17\xc5\x87\xb0\x98\x51\x3a\xd5\x04\xf0\xae\x7c\xaf\x87\xf8\x57\x9e\x95\xda\xb6\xb2\xd2\xc2\x61\x2c\x46\xac\xc4\x8e\x6b\x55\x78\xbe\x7a\x69\xd1\xed\xf9\x25\xbb\x60\xd7\x83\x11\xcb\x58\x51\x15\x84\x1d\x01\xf3\x8f\xb0\x7f\x74\xb0\xab\xb9\x7c\x33\xf4\x8c\x0f\xcf\x26\xeb\x9a\x8d\x74\x52\x6d\xa0\xd4\xc2\xfb\xbb\xc4\x88\x4d\x21\x1c\xf4\x9f\x54\x99\x0d\x3a\x8f\xa3\x59\xa9\x1d\xca\x6e\x28\x51\xa1\xa3\xbc\x92\x46\x2b\x94\x41\xd7\xbb\x4e\x60\xa6\x1d\xed\xe4\x3f\xcb\xc4\xcc\x5d\x38\x61\xe4\x28\x30\x4f\xf2\x47\x14\x2e\x90\xd5\x68\xb1\x87\x07\xad\xd0\x84\x8c\x8b\x01\x9d\x13\xfc\x70\x6c\xf5\x01\xd0\x58\x29\x7d\x26\x22\xad\x72\x22\x1b\x70\xa9\xce\x4a\x2d\x93\xfc\x3f\xd4\x56\x48\x78\x88\x66\x87\x9b\x91\x44\xa7\x33\x6a\x61\x96\x14\x4d\x49\x0f\xe3\xf1\x38\x21\xe3\xad\xfe\xa4\x98\xf1\xe8\xd4\xb2\x0e\x47\x95\xf9\x46\x98\xd9\x24\x02\xee\x28\xe6\x2b\x4d\x5e\x59\x73\x0b\xaf\xaf\xc0\x06\x03\xde\xde\x48\x49\xca\x38\xc5\x3e\x0d\x65\x3a\x50\xa6\xaa\xc0\xe0\x7b\x3e\xfb\x47\x04\xf4\x81\x70\xce\xbf\xab\x5f\xd6\x8c\x8e\x62\x99\xca\xae\x6b\x07\x5d\x59\x69\x49\x32\x74\x41\x4f\xb8\x85\x11\xf4\x7e\x23\x94\x16\x85\xc6\xdf\x60\x1a\x5b\xf7\x6a\xe9\xd1\xb6\x8d\x24\x42\x56\x1f\x68\x19\x1f\x6d\xaf\x67\xda\xb5\x36\x55\x14\xad\x7f\xff\x1f\x4f\xf7\xae\xac\xe9\xdc\xf7\x80\x2f\xc3\x45\xb2\x55\x46\xda\xad\x4f\xc8\xc5\x70\x87\xe4\x46\x23\xc9\x48\xf2\xbf\xed\xd6\x44\x51\x1f\x91\x7e\x79\xbd\x44\xcd\x7c\x1e\x7d\xf0\x27\xcd\xcb\x51\x4e\x19\xf2\xf9\xf4\x65\x18\x7d\x72\xd2\xfc\x40\x4f\xf8\x42\xcd\xd0\xea\x00\xda\x68\xd0\x77\xef\x18\x9c\x7c\x2b\xbc\x43\x98\x78\xfe\xb8\x90\xe5\xe2\x46\x1c\x10\x1c\xe1\xde\x4b\x89\x12\x70\x5d\x60\xdc\x4c\x60\x2b\xda\x8d\xde\xb6\xae\x44\xcf\x66\x6f\xf7\xc9\x6e\x41\xb4\xc1\xa6\x91\xbf\x8b\xf6\xb5\x6d\xb5\x84\xad\x75\xcf\xd0\x38\xdb\xa0\xd3\x7b\x36\x2f\x6a\x2a\x45\x5c\x5c\x2d\xfe\xac\x16\x1f\xf4\x0a\xb1\xcd\xbe\x9e\xe9\xb7\x41\x1b\x73\x89\x43\x9f\x30\xef\xb1\x3f\xe8\x43\x29\x32\xde\x2f\x1f\x5a\x46\xf1\xbf\xec\x5b\x00\x00\x00\xff\xff\xd2\xe6\xea\xf5\xd3\x06\x00\x00")

func tmplChangelogHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplChangelogHtml,
		"tmpl/changelog.html",
	)
}

func tmplChangelogHtml() (*asset, error) {
	bytes, err := tmplChangelogHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/changelog.html", size: 1747, mode: os.FileMode(420), modTime: time.Unix(1454242289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x6d\x6f\xdb\x36\x10\xfe\x6c\xff\x0a\x42\x1b\x2a\x19\x8d\xa9\xb4\xe9\x36\xc0\x91\x05\x14\x2b\xb6\x62\xeb\xba\x62\xe9\x56\xec\xd3\x40\x8b\xb4\xc5\x84\x22\x35\x92\x8e\x9d\x05\xfe\xef\x3b\xbe\xc8\x96\xed\xa4\x0e\x8a\x2d\x08\x6c\xf2\x78\xbc\x97\x87\xcf\x1d\xe9\xa2\xb6\x8d\x28\x87\x83\xa2\x66\x84\xc2\xf7\xa0\x10\x5c\xde\x20\xcd\xc4\x34\x31\xf6\x4e\x30\x53\x33\x66\x13\x54\x6b\x36\x9f\x26\xb5\xb5\xad\x99\xe4\x79\x43\xd6\x15\x95\x78\xa6\x94\x35\x56\x93\xd6\x4d\x2a\xd5\xe4\x5b\x41\x7e\x81\x2f\xf0\xcb\xbc\x32\x66\x27\xc3\x0d\x07\x2d\x63\x92\xff\xd7\xcd\xd8\xd6\xac\x61\xff\x9d\xb3\xb9\x92\x76\x4c\x56\xcc\xa8\x86\xe5\xaf\xf0\x37\xf8\xdc\xfb\xeb\x8b\x7b\xce\x9c\x37\xef\xa3\x1c\xce\x14\xbd\x43\xf7\xa8\x25\x94\x72\xb9\x18\x5b\xd5\x4e\xd0\x77\xe7\xed\xfa\x12\x6d\x9c\x56\x1e\xd5\xfc\x8e\x4a\xf3\xd6\x22\xa3\xab\x5d\x3c\xe0\xff\xda\xe0\x4a\xa8\x25\x9d\x0b\xa2\x99\x0f\x86\x5c\x93\x75\x2e\xf8\xcc\xe4\xd7\x7f\x2f\x99\xbe\xcb\x5f\xe2\x17\xf8\x55\x9c\xf8\x30\xae\x21\x0a\xb0\xed\x0d\x96\x8f\xd9\x7e\x2a\xb0\xd7\x87\xc7\xf7\x24\xeb\x27\x22\x6f\x00\x31\x69\xc1\x94\x0b\xfe\x1c\x7f\xdb\x09\x8e\xed\xef\x1c\x94\xc3\x5b\xa2\x91\x61\xfa\x96\x69\xa3\xaa\x1b\x66\xd1\x14\x49\xb6\x42\x9f\xd8\xec\xca\xcf\xb3\x64\xe5\x7c\x0b\x55\x11\x51\x2b\x63\x27\xf7\xf7\x08\x7f\x50\xda\xa2\xcd\x06\xa4\x0b\x93\x8c\x2e\x87\x7d\x03\x58\xc9\x86\x19\x43\x16\x0c\x4c\xcd\x97\xb2\xb2\x5c\xc9\x8c\x8d\xd0\xfd\x70\xe0\x9c\x51\x10\xff\x74\xf5\xeb\x7b\xdc\x12\x6d\x58\xc6\x30\x25\x96\x80\x0d\xbf\xb8\x86\xc5\xaf\xb3\xf4\xab\x14\x3d\x47\x14\xff\xcc\xee\xdc\x02\x9f\xa3\x6c\x8d\x05\x93\x0b\x5b\x7b\x33\x5e\xd5\x15\x18\x68\x27\xc9\x19\x08\x06\x95\x1f\x53\x22\x17\x4c\x07\x09\xaf\x94\x74\x32\xc0\xcb\xb0\xa8\x04\xdc\x02\x44\x40\x4a\xf1\x6f\x8c\x18\x25\xbd\xd8\xb3\x78\x8a\xd2\x82\x1c\x50\x17\x6a\x57\x5b\x10\xb5\x82\xdc\x79\xb0\x17\x79\x08\xec\xf7\x56\x28\x42\x99\x86\x49\x9a\x6f\x63\xf5\xb3\xa4\xbc\xe5\x6c\x55\xe4\xa4\x4c\x21\xf4\x81\x59\x71\x5b\xd5\x28\xa3\xf8\xca\x12\xbb\x34\x21\xfe\x41\x45\x0c\x43\xc9\xd5\xb2\xaa\x00\xaa\x64\xe2\x44\x31\x05\x13\x65\x97\x5e\xb6\x4d\xa2\x66\xd5\x4d\x94\xed\xb2\x70\x81\x07\xd9\x4c\x33\x12\x86\xd1\xf2\x0d\x6f\x5b\x46\xf7\x2c\xaf\x88\x96\x50\x30\x4f\xb2\x9c\xbe\x16\x60\x11\xea\x2c\x66\x4a\x27\xcf\xe4\xcc\xb4\x97\x2e\xd7\x07\xbc\xba\xc2\x8b\xe7\x91\x16\xa6\x25\x12\x55\x82\x18\x33\x4d\x2c\x5b\xdb\xb1\xdb\x04\x21\x3c\x4f\x81\x83\xbc\x5b\x99\x13\x34\x27\x7e\xc9\x47\x02\xd0\x39\x86\xf2\x72\xe7\xa7\x8b\x06\x96\x80\xba\x60\x34\x20\xba\x47\x0f\xb7\x38\x36\x1e\xd9\x74\x84\x5d\x08\x99\xfb\x70\xac\xd9\x20\x26\x00\x8a\x8e\x2e\x56\x07\x6a\x15\x56\x97\xa0\x4a\xac\xd5\x59\xca\x69\x7a\xb6\xe5\x19\x28\x3a\xa6\x51\xfc\x01\x8e\x5b\x1b\xec\x29\x8f\x3f\x71\x29\x99\x8e\xc7\x66\x75\xdc\xe8\x93\x80\xbd\x69\x3c\xae\x74\xe4\x61\xd8\xb9\x7c\x40\x35\x90\x33\x6a\x0e\x63\x58\x06\xa2\x0a\x75\x1a\x28\xa2\xad\x5f\x77\xbb\xe1\x00\x25\xcd\x7c\xc8\xb4\xec\xb2\x3b\x88\xee\x2d\xd3\x6a\xf4\xf9\x1d\xe1\x40\xca\x00\x59\xdc\xac\x59\xa3\x2c\xf3\xbb\x7b\xf0\x06\xe8\x0b\xd3\x10\x21\xf6\x0e\xb0\x59\x5a\xe0\x52\x99\x3d\x64\xe3\x3d\x69\x98\xb3\x31\xea\xce\xe8\x44\x38\x14\xbf\xe1\xc6\x15\xd4\xc7\xbb\x96\x9d\xd0\x35\x78\xae\x74\x43\xa0\x07\x51\x4a\xcf\xd0\x2f\xf0\x87\xde\xa8\x33\x54\x4f\x9a\x06\x91\x64\xf4\xc8\xf6\x13\x19\x80\x55\xad\x9a\xf7\x6a\x95\x8d\xba\xc0\x9d\xfe\xc9\xc8\x63\x3b\xa5\x4b\x4d\x7c\x4b\x83\x4c\xe2\x10\xe5\xe8\xc5\xb9\xff\x83\x63\x6e\xb8\x10\xdc\x30\x60\x2f\xf5\x9c\x5c\x36\x44\xf2\x7f\x58\x16\xa3\x0d\x14\x0b\xcd\x00\x4d\xa7\x50\x81\xa1\xc4\x5c\x65\xf6\x58\x76\x18\xc1\x21\x5f\x1f\x20\x7e\x7a\x58\x5c\xa6\xf5\xdc\xed\x86\xa1\xbe\x62\x96\x87\x54\xfd\x22\x7f\x47\x95\xde\xb5\x98\xa3\x3a\x0f\x4d\xf8\xa0\xc0\xbb\x26\xdc\xaf\xf0\xd1\xae\x3c\x5c\xa1\x2f\x80\x5d\xce\x61\x0b\x4d\xd8\x05\x68\xf5\x16\x44\xb7\xbc\x84\x8b\xe7\x2f\xf7\xc2\x72\x75\x85\xab\x9a\x0b\xaa\x99\xcc\x46\xf1\xb2\xf0\xf8\x9e\xa3\x67\xcf\xd0\x1e\xe2\xe9\x16\xf1\x34\x22\x7e\x6c\x2b\x66\xf8\x65\x37\x42\x52\xfe\x01\x77\x00\x7a\xc7\x8d\x45\x6a\x8e\xfe\x54\x4b\x8d\x7e\x74\x99\xf8\x6b\x21\x66\x08\xff\x9b\xa3\x9b\xd3\xe3\x74\x7c\x6f\xba\xf8\x5a\xad\x16\xda\xb7\x1a\xec\xb0\xce\x92\x1f\xb8\xe4\xf0\xe2\xa2\xee\x02\xde\x5c\x86\xa7\x4f\xf7\x80\x28\xf2\xf8\xee\x2c\xdc\x6b\xc9\xbf\x28\x28\xbf\xed\xce\x44\x92\xdb\x19\xf4\x9e\xf0\x35\xe6\xd2\x45\xc0\xba\xe9\x9c\xaf\x19\x75\xaf\x2a\xff\xc4\xdb\xdb\xe7\x3a\x32\xe1\x40\xa9\xb0\xf4\x80\xcd\x71\x00\x30\xae\x0f\x00\xbf\xfd\xe5\x99\x26\x92\x76\x2f\x44\xc0\xe9\x6d\x0f\x4f\xf4\xbd\xe0\x50\x60\x0e\xa3\x60\x3d\x07\xf3\x71\xb8\x14\x3d\x43\x5d\xa4\xbd\xa1\xe6\x8b\xda\x6e\xbd\x0a\x7e\xe0\xd6\x01\x06\x87\x02\x69\x02\xa6\x13\xe4\x9e\x30\x71\x02\xaf\x98\x02\x9e\x4f\x9d\xc7\xa5\x08\x49\x77\xae\x77\x83\xc7\x61\xf0\x4b\x9c\x4e\x93\x1e\x83\x92\xbd\xb2\xa8\x20\xad\x2d\x28\xe0\x1c\xe8\xeb\xbb\x28\xd0\x65\xb3\x19\x46\xa0\x4e\x12\xcd\x3f\xbc\xba\x5d\x9f\xe7\x58\xe7\x08\x4a\x26\x7a\xd8\x81\x59\xd4\x17\xe5\xc7\x9a\x1b\x74\x05\x64\xf2\x70\x1c\xd7\x71\x68\x97\x3e\xa9\x8e\x76\x49\xb9\xad\x1a\x8c\x71\x2c\x57\xa0\xd9\x45\x30\x6a\xc9\x4c\xb0\xad\x0d\x3f\xf1\x9f\xe3\x5a\xdd\xee\xf8\x62\xbb\x5f\x43\x7e\xa2\xe3\xc8\xc9\x77\xd8\x8a\x71\x43\xc7\x2f\x92\xf2\x35\x64\x62\xeb\xc7\x55\x5e\x82\xca\x02\x8e\xc1\xd8\xcf\xeb\x81\x29\x77\xd5\x1c\x29\x29\xe1\x52\x98\x26\x60\xc7\xdf\xbb\x27\xad\xbc\xf3\x3d\xe5\x64\x50\xa1\xd1\xf4\xd4\x60\xa8\x3b\x7e\xf5\x00\x28\xac\xff\x21\xe3\x30\xf6\x5d\x2e\xd9\xea\x74\x25\xeb\xc6\x0e\xc3\x3e\x11\x8b\x3c\xac\x02\xf2\xfe\x07\xe6\xbf\x01\x00\x00\xff\xff\x47\xd4\x34\x24\x68\x0e\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 3688, mode: os.FileMode(420), modTime: time.Unix(1454242289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/changelog.html": tmplChangelogHtml,
	"tmpl/index.html": tmplIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"changelog.html": &bintree{tmplChangelogHtml, map[string]*bintree{}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

